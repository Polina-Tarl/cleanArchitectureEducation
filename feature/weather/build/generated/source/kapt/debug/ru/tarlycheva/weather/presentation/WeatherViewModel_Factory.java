// Generated by Dagger (https://dagger.dev).
package ru.tarlycheva.weather.presentation;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.tarlycheva.weather.domain.useCase.IWeatherDataUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherViewModel_Factory implements Factory<WeatherViewModel> {
  private final Provider<IWeatherDataUseCase> weatherDataUseCaseProvider;

  public WeatherViewModel_Factory(Provider<IWeatherDataUseCase> weatherDataUseCaseProvider) {
    this.weatherDataUseCaseProvider = weatherDataUseCaseProvider;
  }

  @Override
  public WeatherViewModel get() {
    return newInstance(weatherDataUseCaseProvider.get());
  }

  public static WeatherViewModel_Factory create(
      Provider<IWeatherDataUseCase> weatherDataUseCaseProvider) {
    return new WeatherViewModel_Factory(weatherDataUseCaseProvider);
  }

  public static WeatherViewModel newInstance(IWeatherDataUseCase weatherDataUseCase) {
    return new WeatherViewModel(weatherDataUseCase);
  }
}
