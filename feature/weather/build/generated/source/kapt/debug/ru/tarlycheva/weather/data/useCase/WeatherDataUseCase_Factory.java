// Generated by Dagger (https://dagger.dev).
package ru.tarlycheva.weather.data.useCase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.tarlycheva.weather.domain.repository.IWeatherDataRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherDataUseCase_Factory implements Factory<WeatherDataUseCase> {
  private final Provider<IWeatherDataRepository> weatherDataRepositoryProvider;

  public WeatherDataUseCase_Factory(
      Provider<IWeatherDataRepository> weatherDataRepositoryProvider) {
    this.weatherDataRepositoryProvider = weatherDataRepositoryProvider;
  }

  @Override
  public WeatherDataUseCase get() {
    return newInstance(weatherDataRepositoryProvider.get());
  }

  public static WeatherDataUseCase_Factory create(
      Provider<IWeatherDataRepository> weatherDataRepositoryProvider) {
    return new WeatherDataUseCase_Factory(weatherDataRepositoryProvider);
  }

  public static WeatherDataUseCase newInstance(IWeatherDataRepository weatherDataRepository) {
    return new WeatherDataUseCase(weatherDataRepository);
  }
}
