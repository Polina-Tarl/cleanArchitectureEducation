// Generated by Dagger (https://dagger.dev).
package ru.tarlycheva.weather.di.modules;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import retrofit2.Retrofit;
import ru.tarlycheva.weather.domain.api.WeatherService;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherModule_ProvideWeatherApiFactory implements Factory<WeatherService> {
  private final Provider<Retrofit> retrofitProvider;

  public WeatherModule_ProvideWeatherApiFactory(Provider<Retrofit> retrofitProvider) {
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public WeatherService get() {
    return provideWeatherApi(retrofitProvider.get());
  }

  public static WeatherModule_ProvideWeatherApiFactory create(Provider<Retrofit> retrofitProvider) {
    return new WeatherModule_ProvideWeatherApiFactory(retrofitProvider);
  }

  public static WeatherService provideWeatherApi(Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(WeatherModule.INSTANCE.provideWeatherApi(retrofit));
  }
}
