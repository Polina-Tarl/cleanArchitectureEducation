// Generated by Dagger (https://dagger.dev).
package ru.tarlycheva.weather.di.modules;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.tarlycheva.weather.data.repository.WeatherDataRepository;
import ru.tarlycheva.weather.domain.useCase.IWeatherDataUseCase;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherModule_ProvideWeatherUseCaseFactory implements Factory<IWeatherDataUseCase> {
  private final Provider<WeatherDataRepository> weatherDataRepositoryProvider;

  public WeatherModule_ProvideWeatherUseCaseFactory(
      Provider<WeatherDataRepository> weatherDataRepositoryProvider) {
    this.weatherDataRepositoryProvider = weatherDataRepositoryProvider;
  }

  @Override
  public IWeatherDataUseCase get() {
    return provideWeatherUseCase(weatherDataRepositoryProvider.get());
  }

  public static WeatherModule_ProvideWeatherUseCaseFactory create(
      Provider<WeatherDataRepository> weatherDataRepositoryProvider) {
    return new WeatherModule_ProvideWeatherUseCaseFactory(weatherDataRepositoryProvider);
  }

  public static IWeatherDataUseCase provideWeatherUseCase(
      WeatherDataRepository weatherDataRepository) {
    return Preconditions.checkNotNullFromProvides(WeatherModule.INSTANCE.provideWeatherUseCase(weatherDataRepository));
  }
}
