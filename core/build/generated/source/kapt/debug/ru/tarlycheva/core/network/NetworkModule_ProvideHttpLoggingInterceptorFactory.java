// Generated by Dagger (https://dagger.dev).
package ru.tarlycheva.core.network;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideHttpLoggingInterceptorFactory implements Factory<HttpLoggingInterceptor> {
  private final NetworkModule module;

  public NetworkModule_ProvideHttpLoggingInterceptorFactory(NetworkModule module) {
    this.module = module;
  }

  @Override
  public HttpLoggingInterceptor get() {
    return provideHttpLoggingInterceptor(module);
  }

  public static NetworkModule_ProvideHttpLoggingInterceptorFactory create(NetworkModule module) {
    return new NetworkModule_ProvideHttpLoggingInterceptorFactory(module);
  }

  public static HttpLoggingInterceptor provideHttpLoggingInterceptor(NetworkModule instance) {
    return Preconditions.checkNotNullFromProvides(instance.provideHttpLoggingInterceptor());
  }
}
