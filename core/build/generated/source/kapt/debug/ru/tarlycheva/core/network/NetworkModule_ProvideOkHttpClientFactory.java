// Generated by Dagger (https://dagger.dev).
package ru.tarlycheva.core.network;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<HttpLoggingInterceptor> networkLoggingInterceptorProvider;

  public NetworkModule_ProvideOkHttpClientFactory(NetworkModule module,
      Provider<HttpLoggingInterceptor> networkLoggingInterceptorProvider) {
    this.module = module;
    this.networkLoggingInterceptorProvider = networkLoggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, networkLoggingInterceptorProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(NetworkModule module,
      Provider<HttpLoggingInterceptor> networkLoggingInterceptorProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(module, networkLoggingInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(NetworkModule instance,
      HttpLoggingInterceptor networkLoggingInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClient(networkLoggingInterceptor));
  }
}
